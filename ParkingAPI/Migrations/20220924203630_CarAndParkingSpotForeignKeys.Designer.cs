// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingAPI.Data;

#nullable disable

namespace ParkingAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220924203630_CarAndParkingSpotForeignKeys")]
    partial class CarAndParkingSpotForeignKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ParkingAPI.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CarSpotId")
                        .HasColumnType("int");

                    b.Property<bool>("IsParked")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarSpotId")
                        .IsUnique()
                        .HasFilter("[CarSpotId] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("ParkingAPI.Models.CarSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("SpotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CarSpots");
                });

            modelBuilder.Entity("ParkingAPI.Models.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CarSpotId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarSpotId")
                        .IsUnique()
                        .HasFilter("[CarSpotId] IS NOT NULL");

                    b.ToTable("ParkingSpots");
                });

            modelBuilder.Entity("ParkingAPI.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ParkingAPI.Models.Car", b =>
                {
                    b.HasOne("ParkingAPI.Models.CarSpot", "CarSpot")
                        .WithOne("ParkedCar")
                        .HasForeignKey("ParkingAPI.Models.Car", "CarSpotId");

                    b.HasOne("ParkingAPI.Models.Person", "Owner")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarSpot");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ParkingAPI.Models.ParkingSpot", b =>
                {
                    b.HasOne("ParkingAPI.Models.CarSpot", "CarSpot")
                        .WithOne("Spot")
                        .HasForeignKey("ParkingAPI.Models.ParkingSpot", "CarSpotId");

                    b.Navigation("CarSpot");
                });

            modelBuilder.Entity("ParkingAPI.Models.CarSpot", b =>
                {
                    b.Navigation("ParkedCar")
                        .IsRequired();

                    b.Navigation("Spot")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
